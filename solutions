# TASK 1
# Вывести на экран сумму четных чисел от 1 до 100 включительно, используя функцию range()

n = 0
for i in range(1, 101, 1):
  if i%2 == 0: n+=i
print(n)

#####
# TASK 2
# Дана строка s = 'bfgshbkis'. Преобразовать её в строку 'ibs', используя оператор извлечения среза только один раз

s = 'bfgshbkis'
s = s[-2:-7:-2]
print(s)

#####
# TASK 3
# Есть список numbers = [0, 99, 100, 53, 44, 23, 4, 8, 16, 15, 77, 51]. Вывести все нечетные числа больше 50, используя функцию filter()

# Set of numbers
numbers = [0, 99, 100, 53, 44, 23, 4, 8, 16, 15, 77, 51]

# Function which gets rid of all even numbers and the odd ones which are less than 50
def odd_num_filter(num):
# Condition to sort out the needed numbers
  if(num % 2) == 1 and num > 50:
    return True
  else:
    return False
# Output of the result (using list here to convert the filter object into Python List)
print(list(filter(odd_num_filter, numbers)))

#####
# TASK 4
# Есть словарь dict = {'one': 1, 'two': 2, 'thee': 3, 'four': 4, 'five': 5}. Составить из него новый 
# словарь, содержащий только те элементы, у которых значение больше или равно 3

# Initial dictionary
dict = {'one': 1, 'two': 2, 'thee': 3, 'four': 4, 'five': 5}

# Creating new dictionary
dict1 = {}
# Filling it with elements of the initial dictionary
for i in dict:
  # Condition to sort out the needed elements
  if dict[i] >= 3: dict1[dict[i]] = i

# Output of the result
print(dict1)

#####
# TASK 5
# Есть список numbers = [0, 99, 100, 53, 44, 23, 4, 8, 16, 15, 77, 51]. Используя модуль random, вывести случайный элемент этого списка

# Choosing random element by using random.choice()
import random
numbers = [0, 99, 100, 53, 44, 23, 4, 8, 16, 15, 77, 51]
print(random.choice(numbers))

#####
# TASK 6
# Есть класс Animal c одним методом voice(). class Animal: def voice(self): pass
# 1. Создать от него три класса наследника и для каждого сделать свою реализацию метода voice()
# 2. Создать по одному экземпляру всех наследников и вызвать для каждого переопределенный метод voice()

# Создать от него три класса наследника и для каждого сделать свою реализацию метода voice().
# Создать по одному экземпляру всех наследников и вызвать для каждого переопределенный метод voice().

class Animal:
  def voice(self): pass

# Класс наследник 1
class Cat(Animal):
  # Своя реализация метода voice()
  def voice(self): return "meow"

# Экземпляр наследника 1
Vasya_the_cat = Cat()
# Вызов переопределенного метода voice()
print(Vasya_the_cat.voice())

# Класс наследник 2
class Pig(Animal):
  # Своя реализация метода voice()
  def voice(self): return "oink"

# Экземпляр наследника 2
Xrusha_the_pig = Pig()
# Вызов переопределенного метода voice()
print(Xrusha_the_pig.voice())

# Класс наследник 3
class Cow(Animal):
  # Своя реализация метода voice()
  def voice(self): return "moo"

# Экземпляр наследника 3
Masha_the_cow = Cow()
# Вызов переопределенного метода voice()
print(Masha_the_cow.voice())

#####
# TASK 7
# Необходимо дополнить "Практическое задание №6" таким образом, чтобы в конце программы мы вызвали статический 
# метод родительского класса Animal, который вывел бы нам количество всех созданных экземпляров. Если мы создали 
# трех наследников в предыдущем задании, то наш метод должен вывести на экран число 3

class Animal:
    # Счетчик
    count = 0

    # Увеличение счетчика
    def __init__(self): Animal.count = Animal.count + 1

    def voice(self): pass


# Класс наследник 1
class Cat(Animal):
    # Своя реализация метода voice()
    def voice(self): return "meow"


# Экземпляр наследника 1
Vasya_the_cat = Cat()
# Вызов переопределенного метода voice()
print(Vasya_the_cat.voice())


# Класс наследник 2
class Pig(Animal):
    # Своя реализация метода voice()
    def voice(self): return "oink"


# Экземпляр наследника 2
Xrusha_the_pig = Pig()
# Вызов переопределенного метода voice()
print(Xrusha_the_pig.voice())


# Класс наследник 3
class Cow(Animal):
    # Своя реализация метода voice()
    def voice(self): return "moo"


# Экземпляр наследника 3
Masha_the_cow = Cow()
# Вызов переопределенного метода voice()
print(Masha_the_cow.voice())


# Статический метод родительского класса Animal, который выводит количество всех созданных экземпляров
def print_count(): print('\n', Animal.count)


print_count()

#####
# TASK 8
# Необходимо считать любой текстовый файл на вашем ПК (можно создать новый) и создать на его основе новый файл,  где содержимое будет 
# записано в обратном порядке. В конце программы вывести на экран оба файла - старый в неизменном виде и новый в обратном порядке

import os, sys

inputfile = "C:/Users/AIlina/Desktop/input.txt"

with open(inputfile, 'r') as inp: b = inp.read()

with open(inputfile, 'r') as inp:
    for line in inp: print(line.rstrip(), end = '\n')

outputfile = "C:/Users/AIlina/Desktop/output.txt"

with open(outputfile, 'w+') as outp: outp.write(b[::-1])

with open(outputfile, 'r') as outp:
    for line in outp: print(line.rstrip(), end = '\n')

#####
# TASK 9
# Необходимо создать два параллельных потока, каждый из которых выводил бы на экран числа от 10 до 1 в обратном порядке с интервалом 
# в одну секунду. В выводе должно быть понятно какая нить выполняется, и когда каждая из них начинает и заканчивает своё выполнение

# Необходимо создать два параллельных потока, каждый из которых
# выводил бы на экран числа от 10 до 1 в обратном порядке с интервалом в одну секунду.
# В выводе должно быть понятно какая нить выполняется, и когда каждая из них
# начинает и заканчивает своё выполнение.

import threading, time

def count(i):
    k = 1
    while k < 11:
        print(f'Thread {i}: {k}' + '\n')
        k = k + 1
        time.sleep(1)

for i in range(2):
    th = threading.Thread(target = count, args = (i,))
    th.start()
    #print("Threads active: %i." % threading.active_count())

#####
# Final Task

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

# Объект вебдрайвера
drv = webdriver.Chrome('chromedriver.exe')
# 1. Открыть страницу http://google.com/ncr
drv.get("http://google.com/ncr")
# 2. Выполнить поиск слова “selenide”
# .//input[contains(@class, "gLFyf gsfi")]
drv.find_element(By.XPATH, './/input[contains(@class, "gLFyf gsfi")]').send_keys('selenide')
drv.find_element(By.XPATH, './/input[contains(@class, "gLFyf gsfi")]').send_keys(Keys.ENTER)

# 3. Проверить, что первый результат – ссылка на сайт selenide.org.
# //*[@id="rso"]/div[1]/div/div/div/div/div/div[1]/a/div/cite
assert 'selenide.org' in drv.find_element(By.XPATH, '//*[@id="rso"]/div[1]/div/div/div/div/div/div[1]/a/div/cite').text

# 4. Перейти в раздел поиска изображений
# //*[@id="hdtb-msb"]/div[1]/div/div[2]/a
drv.find_element(By.XPATH, '//*[@id="hdtb-msb"]/div[1]/div/div[2]/a').click()
# 5. Проверить, что первое изображение неким образом связано с сайтом selenide.org.
# //*[@id="islrg"]/div[1]/div[1]/a[2]/div
print(drv.find_element(By.XPATH, '//*[@id="islrg"]/div[1]/div[1]/a[2]/div').text)
assert "selenide.org" in drv.find_element(By.XPATH, '//*[@id="islrg"]/div[1]/div[1]/a[2]/div').text

# 6. Вернуться в раздел поиска Все
# //*[@id="yDmH0d"]/div[2]/c-wiz/div[1]/div/div[1]/div[1]/div/div/a[1]
drv.find_element(By.XPATH, '//*[@id="yDmH0d"]/div[2]/c-wiz/div[1]/div/div[1]/div[1]/div/div/a[1]').click()
# 7. Проверить, что первый результат такой же, как и на шаге 3.
assert 'selenide.org' in drv.find_element(By.XPATH, '//*[@id="rso"]/div[1]/div/div/div/div/div/div[1]/a/div/cite').text
drv.close()
